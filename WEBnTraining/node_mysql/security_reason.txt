node.js 로 mysql을 다뤄 보았습니다. 
마지막 챕터로 보안에 대해 말해주셨습니다. 들어오는 모든 정보는 오염되어 있다고 여겨야 한다.
들어오는 정보란 예를 들면 이번에 구현 하였던 웹 어플리케이션에서 
글목록에 접근하면 쿼리스트링으로 id 값이 들어오고 프로그램에서 id값에 해당하는 데이터를 
표시 해주었습니다. 이 때의 쿼리스트링이 오염되어 있을 수 있고 또 글을 생성하거나 저자를 
생성 할 때도 들어오는 정보가 오염되어 있을 수 있습니다. 


1) injection
하지만 이미 배운 코드에는 어떠한 보안조치가 취해져 있는데 바로 
db.query('SELECT * FROM topic WHERE id=?', [queryDate.id], function(error, results){});
이런 코드를 많이 사용 했었는데 이중 id=? 과 [queryDate.id] 부분입니다.
쿼리 스트링이 위험한 것은 ?id=1 이라는 쿼리스트링 뒤에 만약 
?id=1;DROP TABLE topic; 이렇게 입력 된다면 topic이라는 테이블 전체가 삭제 되게 됩니다. 
그냥 주소창에 몇글자 적는것 만으로 치명적인 피해를 입게 되는겁니다. 

 위의 물음표와 
[]안에 값을 주는 방법은 위와 같은 오염된 데이터가 들어오더라도 실제 mysql에서 받는 쿼리는 이럴 것입니다.
?id='1;DROP TABLE topic;'  
이렇게 1과 오염된 쿼리가 따옴표로 묵여 있어 쿼리가 아닌 문자로 취급되어 에러 처리가 되게 됩니다.

이 밖에 많은 보안적 기술들이 있을것입니다만 예시로써 위와 같은 한가지 방법을 배웠습니다.
정보를 '주입'하면서 공격하는 보안 공격을 injection이라고 합니다. 유명하고 치명적이라고 합니다.

위에서 쿼리문에 ?와 인자로 []안에 데이터를 주는 것 말고 다른 방법도 있습니다. 
쿼리문에 직접 입력 하지만 데이터를 db.excape()안에 입력하면 여러 기능이 있지만 여기서는 ?, [] 방법과 
같이 따옴표로 입력을 감싸서 에러를 일으킵니다.

2) escaping
들어오는 정보에 대한 보안조치 이외에도 이미 저장된 정보가 오염되어 있을수 있습니다. 그 오염된 정보를 
다른 클라이언트에서 실행 하였을 때 보안 문제가 생기는 것을 excaping이라고 합니다. 그러면 나가는 정보에 대한 
보안 처리는 어떻게 하는가 하면 web2 nodejs 수업에서도 배웠던 sanitizeHTML 이라는 라이브러리를 
이 nodejs- mysql 강의에도 적용하였습니다. 

npm install -S sanitize-html 

npm을 이용하여 라이브러리를 설치하고 (최근에는 -S , -save 를 안적어도 package.json에 다 기록된다고 하더라구요)
라이브러리를 적용할 파일에 
var sanitizeHtml = require('sanitize-html');
로 불러오고 
출력할 데이터들을 
sanitizeHtml('데이터');
로 처리하면 오염된 데이터에 위험할수 있는 태그들을 자동으로 걸러줍니다.
