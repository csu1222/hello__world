<DATABASE> 1   
현대 정보기술에서 데이터의 중요도는 말할 필요도 없이 중요하죠 단순히 기억하기 위해 저장하고 불러오기부터 많은 데이터로부터 
유의미한 패턴들을 파악해 가치를 발생시키는 빅데이터 분야나 이런 빅데이터를 이용해 인공지능의 학습을 돕기도 합니다.
이런 데이터는 두가지 수단으로 관리될 수 있는데요 우선 file의 형태로 저장될 수 있습니다. 파일은 이용하기 매우 간단하고 직관적입니다.
어떤 운영체제에서든지 파일을 이용할 수 있죠 또 이메일같은 서비스를 이용하여 간단하게 파일을 공유할 수 있습니다. 하지만 파일이라고 
만능은 아닙니다. 파일도 어느 부분에서는 성능이나 보안, 편의성에 한계를 가지고 있습니다. 이런 파일의 한계를 극복하기위해 고안된 
소프트웨어가 두번째 데이터를 관리하는 수단인 DATABASE입니다. 데이터베이스는 데이터를 안전하고 편리하고 빠르게 보관하고 사용할 수 있습니다.
데이터베이스에는 여러 제품들이 존재합니다. MySQL, Olacle, MongoDB, SQLite 등등 이 DATABASE 1 항목에서 MySQL, MongoDB같은 서로 다른 
데이터베이스의 공통되는 부분에 대해 공부해보겠습니다. 데이터베이스는 복잡하고 거대하고 위험한 데이터를 다루기 위해 고안된 소프트웨어입니다.
그러므로 데이터베이스를 공부할 때는 상상력을 동원하여 최대한 거대한 데이터를 다룬다는 상황에 공감하며 학습해야 새로 데이터베이스를 배우는 
수고를 납득할 수 있을 것 입니다.

 데이터베이스는 방대한 기능을 가진 소프트웨어입니다. 이런 데이터베이스를 처음 공부 한다고 할 때 모든 요소요소를 각개 격파하면서 배우는 것은 
좋은 방법이 아닐 수 있습니다. 기술들의 공통된 핵심부터 잘 파악하고 공부 할 수 있다면 여러 종류의 데이터베이스 라도 그 핵심되는 기능을 
배웠다고 해도 될 것입니다. 그러면 데이터베이스들의 공통된 핵심은 무엇이냐면 input, output 입력, 출력 입니다. 또 입력은 세가지 종류로 나눌 수 있습니다.
create, update, delete이 세가지로 나눌 수 있죠 출력의 경우 read기능 으로써 표현 될 것입니다. 이 CRUD를 명심 한다면 나머지 데이터베이스의 
기능들은 CRUD를 보좌하는 부가 기능일 것입니다.

 파일과 데이터베이스의 차이점에 대한 예시를 들면 제가 여러 상품에 대한 설명을 파일로 정리하려면 제품의 이름을 가진 txt파일을 만들고 그안에 
제품설명을 적을 것 입니다. 또 파일마다 작성한 날짜, 저자, 저자의 프로필등을 같이 저장하고 싶어서 제품설명 밑에 적었다고 가정해 봅시다. 
이런 식으로 파일로 저장하는 방법은 직관적입니다. 하지만 만약에 이 파일들중에 여러 저자중 특정 저자가 작성한 설명만 보고 싶다거나 작성날짜가
최근인 순서로 정렬 하고 싶을 경우 저는 각각 파일을 열어보고 해당 정보를 찾아서 손수 관리하거나 ctrl + F 로 찾아가면서 정확히 걸러지지 않은 
파일들을 수작업을 해야 할 것입니다. 파일이 몇개 없다면 수작업 할만 할 수 있지 않을까 생각하겠지만 파일이 수천 수만개가 되는 극단적인 상황을 
상상해야 실제 상황에 더욱 도움이 될 것입니다. 이게 파일의 예시라면 데이터베이스의 경우는 예시를 데이터베이스 자체가 아닌 중간단계 비슷한 
스프레드 시트 프로그램으로 예를 들겠습니다. 스프레드 시트는 엑셀, 구글 스프레드 같은 프로그램을 말합니다. 이 스프레드시트는 파일의 경우같이 
여러 제품의 설명을 관리할 때 우선 id 값으로 고유한 번호를 붙일 수도 있고 제품의 이름, 본문, 작성날짜, 저자, 프로필 같이 작성을 시작하기전에 
미리 구조를 만들어 두고 내용을 작성할 수 있을 것입니다. 이렇게 구조적으로 정보를 관리하면 원하는 정보를 손쉽게 뽑아낼 수 있기도 하고 작성날짜 
같은 기준으로 정렬을 하기도 쉽습니다. 스프레드시트가 데이터베이스와 완전히 동일한 개념은 아니지만 파일과 데이터베이스 사이의 개념이기는 합니다.
구조적인 특성을 가지고 있기 때문입니다.

<DATABASE> 2 - MySQL  
MySQL은 무료이면서 오픈소스이고 3대 데이터베이스중 하나입니다. 또한 관계형 데이터베이스이기도 합니다. 관계형 데이터베이스는 여러 제품들이 있는데요
특징상 한가지만 배우면 다른 관계형 데이터베이스를 거의 비슷하게 사용할 수 있다고 합니다.
관계형 데이터베이스와 스프레드시트의 비슷한 점과 다른점을 알아보면서 관계형 데이터베이스에 대해 좀 더 알아보겠습니다. 
우선 스프레드시트, 관계형 데이터베이스 둘 다 표의 형태로 표현할 수 있습니다. 그래서 원하는 정보를 선별적으로 찾을 수 있다는것이 비슷합니다.
다른점은 스프레드 시트는 비주얼적인 인터페이스로 정보를 제어하는것이고 데이터베이스는 코딩, 프로그래밍 언어로 정보를 제어한다는 것입니다.
또 데이터베이스의 다른 특징으로는 데이터베이스에 저장된 데이터를 여러가지 방식으로 나타낼수 있다는 것입니다. 웹으로 표현하거나 빅데이터로 
데이터를 분석하거나 하는 방법으로요. 그 중 웹에서는 전세계 사람들과 통신할 수 있는 특징상 누구나 데이터베이스의 정보를 생성하거나 수적하거나
보고 지울 수 있을 것입니다.

MySQL의 구조에 대해 알아보겠습니다. 총 3가지로 구성되어 있는데요 그 중 첫번째로 우리가 데이터를 입력하는 최종적인 곳이 표(table)입니다.
MySQL, 관계형 데이터베이스는 스프레드시트와 비슷한 표로 데이터를 저장합니다. 이 표는 비슷한 성질의 데이터를 모아 둘 것입니다. 그리고 서비스를 
확장하다보면 각각 다른 성질의 표들이 여럿 생기게 될 것입니다. 이 여러 표들 중 비슷한 내용의 표들을 일종의 폴더 처럼 모아두는 것이 
데이터베이스입니다. 이 데이터베이스라는 표현이 조금 햇갈릴 수 있습니다. 지금 배우고 있는 내용 자체가 데이터베이스인데 표들을 모아두는 폴더도 
데이터베이스라고 부르니깐요. MySQL에서 이 표를 모아두는 폴더로서의 데이터베이스를 스키마(schema)라고도 부른다고 합니다. 이 다음부터는 데이터베이스
대신 스키마라고 부르겠습니다. 그리고 이 스키마가 있으면 다른 분류의 스키마가 여럿 생길 것입니다. 이 스키마를 묶는 더 큰 개념이 데이터베이스 서버
라고 합니다. 그래서 제가 MySQL을 설치하였는데 이 행위는 MySQL이라는 데이터베이스 서버라는 프로그램을 설치한 것이고 이 데이터베이스 서버의 여러 기능을
이용하여 스키마와 테이블로 데이터를 저장하는 것 입니다.

MySQL 서버 접속 - 일단 데이터베이스를 사용하는 장점중 한가지는 보안입니다. 파일은 운영체제만 뚫리면 아무렇게나 수정이 가능하지만 데이터베이스는 자체적인
보안체계를 가지고 있기 떄문에 보다 안전하게 데이터를 보관할 수 있습니다. 그리고 이외에도 권한이라는 기능이 있어서 예를 들어 MySQL에 여러 사용자를 등록
할 수 있는데 사용자마다 권한의 범위를 다르게 줘서 데이터베이스서버 안에 특정 구역만 접근 가능하게 한다던가 전부 접근가능하게 할 수 있습니다.
커맨드 라인에서 MySQL이 설치된 디렉토리에서 밑과 같은 명령어를 입력합니다.
mysql -u[사용자이름] -p
이 명령어는 mysql을 실행하는데 다음 옵션으로 -u 뒤에는 접속할 사용자의 이름을 적습니다. 그중 -uroot 라면 관리자 계정인 root 로 접속 하겠다는 의미입니다. 
그 다음 -p 옵션은 접속계정의 password를 적기위해 입력합니다. -p 없이 접속이 가능하다면 조금더 간편해 지겠지만 암호가 없기 때문에 보안적으로 취약해질 것입니다.
또 바로 mysql -uroot -p1111 
같이 root 계정의 암호가 1111일 경우 -p 뒤에 바로 적어도 접속 가능하지만 이 경우 암호가 화면에 노출 되기 때문에 별로 좋지 않을 것 입니다.

schema or database 만들기 - 먼저 데이터베이스서버에 접속한 후 해야할 일은 데이터베이스 혹은 스키마 라고 하는 큰 틀을 만드는 것입니다. 
그래서 검색 엔진에 mysql create database 정도로 검색을 해보니 그 결과 
CREATE DATABASE '사용할 데이터베이스 이름' 
CREATE TABLE 
이라는 명령어를 찾았습니다. 이중 지금은 CREATE DATABASE 명령어에 대해 알아보겠습니다.
저의 경우 seonguk 라는 이름으로 데이터베이스를 만들었습니다. 번외로 그러면 데이터베이스를 지우는 방법도 알아 봤습니다. 
DROP DATABASE '지울 데이터베이스 이름'
이런 명령어가 나왔습니다. 이렇게 그때 필요한 명령어는 검색을 해보면서 알아가야겠습니다.
SHOW DATABASES 혹은 SHOW SCHEMAS 
명령어로 데이터베이스의 목록을 확인하고 어느 데이터베이스에서 테이블을 만들것 인지 정해야 하니 
USE '데이터베이스의 이름'
명령어로 사용할 데이터베이스로 이동할 수 있었습니다. 
