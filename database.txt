<DATABASE> 1 
현대 정보기술에서 데이터의 중요도는 말할 필요도 없이 중요하죠 단순히 기억하기 위해 저장하고 불러오기부터 많은 데이터로부터 
유의미한 패턴들을 파악해 가치를 발생시키는 빅데이터 분야나 이런 빅데이터를 이용해 인공지능의 학습을 돕기도 합니다.
이런 데이터는 두가지 수단으로 관리될 수 있는데요 우선 file의 형태로 저장될 수 있습니다. 파일은 이용하기 매우 간단하고 직관적입니다.
어떤 운영체제에서든지 파일을 이용할 수 있죠 또 이메일같은 서비스를 이용하여 간단하게 파일을 공유할 수 있습니다. 하지만 파일이라고 
만능은 아닙니다. 파일도 어느 부분에서는 성능이나 보안, 편의성에 한계를 가지고 있습니다. 이런 파일의 한계를 극복하기위해 고안된 
소프트웨어가 두번째 데이터를 관리하는 수단인 DATABASE입니다. 데이터베이스는 데이터를 안전하고 편리하고 빠르게 보관하고 사용할 수 있습니다.
데이터베이스에는 여러 제품들이 존재합니다. MySQL, Olacle, MongoDB, SQLite 등등 이 DATABASE 1 항목에서 MySQL, MongoDB같은 서로 다른 
데이터베이스의 공통되는 부분에 대해 공부해보겠습니다. 데이터베이스는 복잡하고 거대하고 위험한 데이터를 다루기 위해 고안된 소프트웨어입니다.
그러므로 데이터베이스를 공부할 때는 상상력을 동원하여 최대한 거대한 데이터를 다룬다는 상황에 공감하며 학습해야 새로 데이터베이스를 배우는 
수고를 납득할 수 있을 것 입니다.

 데이터베이스는 방대한 기능을 가진 소프트웨어입니다. 이런 데이터베이스를 처음 공부 한다고 할 때 모든 요소요소를 각개 격파하면서 배우는 것은 
좋은 방법이 아닐 수 있습니다. 기술들의 공통된 핵심부터 잘 파악하고 공부 할 수 있다면 여러 종류의 데이터베이스 라도 그 핵심되는 기능을 
배웠다고 해도 될 것입니다. 그러면 데이터베이스들의 공통된 핵심은 무엇이냐면 input, output 입력, 출력 입니다. 또 입력은 세가지 종류로 나눌 수 있습니다.
create, update, delete이 세가지로 나눌 수 있죠 출력의 경우 read기능 으로써 표현 될 것입니다. 이 CRUD를 명심 한다면 나머지 데이터베이스의 
기능들은 CRUD를 보좌하는 부가 기능일 것입니다.

 파일과 데이터베이스의 차이점에 대한 예시를 들면 제가 여러 상품에 대한 설명을 파일로 정리하려면 제품의 이름을 가진 txt파일을 만들고 그안에 
제품설명을 적을 것 입니다. 또 파일마다 작성한 날짜, 저자, 저자의 프로필등을 같이 저장하고 싶어서 제품설명 밑에 적었다고 가정해 봅시다. 
이런 식으로 파일로 저장하는 방법은 직관적입니다. 하지만 만약에 이 파일들중에 여러 저자중 특정 저자가 작성한 설명만 보고 싶다거나 작성날짜가
최근인 순서로 정렬 하고 싶을 경우 저는 각각 파일을 열어보고 해당 정보를 찾아서 손수 관리하거나 ctrl + F 로 찾아가면서 정확히 걸러지지 않은 
파일들을 수작업을 해야 할 것입니다. 파일이 몇개 없다면 수작업 할만 할 수 있지 않을까 생각하겠지만 파일이 수천 수만개가 되는 극단적인 상황을 
상상해야 실제 상황에 더욱 도움이 될 것입니다. 이게 파일의 예시라면 데이터베이스의 경우는 예시를 데이터베이스 자체가 아닌 중간단계 비슷한 
스프레드 시트 프로그램으로 예를 들겠습니다. 스프레드 시트는 엑셀, 구글 스프레드 같은 프로그램을 말합니다. 이 스프레드시트는 파일의 경우같이 
여러 제품의 설명을 관리할 때 우선 id 값으로 고유한 번호를 붙일 수도 있고 제품의 이름, 본문, 작성날짜, 저자, 프로필 같이 작성을 시작하기전에 
미리 구조를 만들어 두고 내용을 작성할 수 있을 것입니다. 이렇게 구조적으로 정보를 관리하면 원하는 정보를 손쉽게 뽑아낼 수 있기도 하고 작성날짜 
같은 기준으로 정렬을 하기도 쉽습니다. 스프레드시트가 데이터베이스와 완전히 동일한 개념은 아니지만 파일과 데이터베이스 사이의 개념이기는 합니다.
구조적인 특성을 가지고 있기 때문입니다.