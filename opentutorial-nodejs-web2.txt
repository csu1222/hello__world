#URL :  예시 URL
  http://opentutorials.org:3000/main?id=HTML&page=12
  여기서 http 부분은 protocol 통신규칙 이라고 합니다. 사용자가 서버에 접속 할 때 어떤 방식으로 할 것 인가에 대한 부분입니다.
  그다음 opentutorials.org부분은 host (domain name 이라고도 합니다.) 인터넷에 접속 되어있는 각각의 컴퓨터를 host 라고 합니다. 각 컴퓨터의 이름이라고 할 수 있겠습니다.
  :3000 부분은 port 라고 부릅니다. 한개의 컴퓨터(host)에 여러 서버가 있을 수 있습니다. 그 중 port 번호로 실행된 서버와 통신하기 위한 번호입니다.
  / 뒤에 main 부분은 path 입니다. host 컴퓨터 안에 있는 어떤 디렉토리의 어떤 파일인지를 가르킵니다.
  ?id=HTML&page=12 부분은 query string 입니다. 이 query string으로 앞부분의 서버에게 데이터를 전달 할 수 있습니다. 어떤 가령 id가 HTML인 파일을 원한다. 그리고 복수의 데이터를 전달하기 위해서는 & 으로 연결해줍니다. 다시 page는 12번을 원한다는 의미가 됩니다.

#node.js 에서 url 추출하기 : 예시로 
[protocol] ://[host]:[port]/[query string] 의 형태에서 query string 부분을 추출 하고 싶습니다. 일단 강의 예제 파일은 아래 와 같습니다.
var http = require('http');
var fs = require('fs');

var app = http.createServer(function(request,response){
    var _url = request.url;
    console.log(_url);
    if(_url == '/'){
      _url = '/index.html';
    }
    if(_url == '/favicon.ico'){
        response.writeHead(404);
        response.end();
        return;
    }
    response.writeHead(200);
    response.end(fs.readFileSync(__dirname + _url);
 
});
app.listen(3000);

위 코드에서 8번째 줄에 있는 console.log(_url); 의 출력 값이 콘솔 화면에 query string 부분을 출력 해주었습니다.  그리고 node.js의 기본 모듈인 url을 임포트 하고
 
var url = require('url') 

어플리케이션 안에 query string 을 분석하는 코드를 적습니다.

var queryData = url.parse(_url, true).query;

여기서 parse의 두번째 인수로 true를 주면 query data의 데이터형을 object 로 반환해주고인수가 false였으면 데이터형을 string으로 반환해준다고 합니다.
그래서 console.log(queryData); 를 해보면 query string이 {... : ...}, {... : ...}같이 object로 콘솔에 출력됩니다. 

#동적인 웹 어플리케이션 - 1 
query string으로 어플리케이션에 동적인 변화를 줄 수 있었습니다. 위의 queryData라는 변수는 예를 들어 /?id=HTML이라는 query string을 주면 id 키 값을 가진 오브젝트가 생성되고 queryData.id 이런 식으로 HTML 이라는 값을 얻을 수 있습니다. 이러한 점을 이용해 URL에 query string 이라는 형식으로 어떤 데이터를 입력하면 그에 맞추어 웹이 동적으로 움직일 수 있었습니다.

#파일 읽기 - 정보 시스템의 핵심적인 요소로 CRUD 중 Read에 대해 공부 했습니다. node js 로 file을 읽기 위해 nodejs file read 로 구글링해서 nodejs 공식 document를 찾아 봤습니다.  설명에 따르면 
FileSystem을 require 하고 

var fs = require('fs')

readFile 메소드를 불러 첫번째 인자로 읽어올 파일의 위치를 문자열로 입력합니다. 두번째 인자로 error 와 data 를 인자로 받을 콜백 함수를 줍니다. 콜백 함수에서 data 값을 사용하면 된다고 나와 console.log 로 출력해보았으나 buffer ~~~ 라고 출력이되어 readFile메소드의 두 인자 사이에 문자열로 utf-8 이라는
문자 인코딩 방식을 인자로 준 결과 제대로 출력되었습니다.

fs.readFile('읽을 파일의 경로', 'utf-8', function(err, data){
              console.log(data);
});

여기에 읽을 파일의 경로를 위쪽에 있는
var url = require('url');
var queryData = url.parse(_url, true).query;
의 queryData변수의 id값을 지정하면 웹사이트 query string이 가르키는 값과 같은 이름의 파일을 data 값으로 받을 수 있습니다. 이제 data의 값을 웹사이트의 본문이나 필요한 곳에 입력하면 동적으로 웹사이트의 내용을 표시하면서도 코드상에서도 보기 쉽게 정리할 수 있게됩니다.

# 콘솔에서의 입력값 - 프로그래밍에서 함수는 input 값을 어떤 방식에따라 처리하고 나온 output값 내는 것 입니다. input 값은 parameter 혹은 argument 라고 하는데 parameter는 입력되는 정보의 형식이라고 할 수 있고 argument 는 parameter에 따라 실제로 입력된 값 이라고 합니다. 또 Input 과 Output을 줄여서 IO 라고 부르기도 한답니다. 위에서 실습했던것 중에서는 URL에 query string 으로 input(parameter 또는 argument)을 준 것 입니다.
이번 학습에서는 실용성은 없지만 콘솔에서 직접 input을 주는 방법을 알아 봅니다. 구글에 nodejs console input parameter 정도로 검색을 해보니
 var args = process.argv 같은 코드를 알아내었습니다. 이 args 변수를 콘솔로그 해보니 어떤 배열을 출력해주었는데. 배열의 첫번째 값으로 node.js로 실행 해서 그런지 node.js 가 어디에 설치되어었는지 그 경로를 줬고, 두번째 값으로는 args 변수를 실행한 파일이 있는 경로를 주었습니다. 또 args의 파일을 실행하면서 
node args파일경로 seonguk 
같이 뒤에 seonguk 이라는 그냥 제 이름을 같이 입력하면 args파일이 출력해주던 배열에 세번째 값으로 seonguk 이라는 문자열을 주었습니다. 배열은 0, 1, 2 이런 순서로 인덱스가 부여되기 때문에 
console.log(args[2]); 
를 nodejs 로 실행하면 3번째 값인 seonguk 이 콘솔에 출력됩니다. 


# Not Found page 구현 - 웹페이지에 허용되지 않은 경로로 접속했을 때 유효한 경로가 아니라는 걸 표시하는 기능을 구현합니다. not found 를 구현 하기위해서는 url 이 약속된 쿼리스트링을 가르키는지 아니면 약속되 있지 않은 경로를 가르키는지 알아야 하겠습니다. 위에서 queryData 변수가 있었는데요 그 변수는 이렇게 생겼습니다.
var url = require('url');
var queryData = url.parse(_url, true).query;  //_url은 node.js 에서 서버를 만들었을때 parameter 중 request를 사용해 request.url 한 변수 입니다.//
이중 url.parse(_url, true) 를 콘솔로그 해보면 
 Url {
protocol: null,
slashes: null,
auth: null,
host: null,
port: null,
hostname: null,
hash: null,
search: null,
query: [Object: null prototype] {},
pathname: '/',
path: '/',
href: '/'
} 
같은 값을 출력해주는데 이중 query 항목이 쿼리스트링을 따로 객체의 형태로 보여주고 path는 호스트와 포트 뒤 모든 path입니다. 그리고 pathname은 path 중 쿼리스트링을 제외한 문자열을 보여주는데 이 pathname 을 이용하여 잘못된 경로로 들어왔는지 판별 할 것 입니다. 
javascript의 조건문을 사용하여
if (url.parse(_url, true).pathname === '/' ) {
    '웹페이지에 표시할 본문'
} else {
    response.writehead(404);
    response.end('NOT FOUND');
}
이런 식으로 유효한 path로 접근 했으면 pathname이 / 일 것이므로 본문을 표시 하려던 정보를 표시하고 그 이외에는 404코드와 'NOT FOUND' 라는 텍스트를 표시해주는 작업이었습니다.


# 홈페이지 구현 - 아직 우리는 홈페이지 구현을 안하고 있었습니다. 이제 위에서 NOT FOUND 페이지 구현을 응용하여 쿼리스트링에 id값이 없는 홈페이지를 구현할 수 있습니다. 홈페이지와 목차에 있는 본문들과의 차이점은 path에 id 값을 가지고 있느냐 인데 이를 위해 
var url = require('url');
var queryData = url.parse(_url, true).query; 
라는 queryData변수의 id 값을 조건문으로 구별 하겠습니다.
일단 특이한 다른 path로 접근하는 것이 아니기 때문에 pathname이 '/'이면서 queryData.id 값을 봐야합니다.
if (pathname === '/') {
     if (queryData.id === undefined) {
         '홈페이지의 내용'
    }
} else {
    '다른 본문들의 내용'
}
이렇게 됩니다. 위와 같이 queryData.id 값이 없는 홈페이지라서 undefined 일 때로 조건을 걸면 구분이 되겠습니다.


# Node.js 에서 파일 목록 알아내기 - 웹 어플리케이션에서 파일의 목록들을 수정 할 때 수작업으로 파일 목록을 수정하기는 어려우니 node.js 의 기능으로 자동화 시키는 법을 알아보겠습니다. 구글에서 node js file list in directory 정도로 검색해본 결과 

const testFolder = './data/';
const fs = require('fs');

fs.readdir(testFolder, (err, files) => {
    console.log(files);
});
이런 형식이었습니다. fs를 리콰이어 하고  fs.readdir 메소드로  파일들이 있는 디렉토리를 첫 parameter로 주고 두번째 parameter는 error 와 디렉토리 안에 있는 파일의 파일명을 배열의 형태로 return 해주는 함수를 parameter 로 주게됩니다.
    위에서 알아본 readdir 메소드로 컴퓨터의 파일들을 자동으로 리스팅해서 수정되거나 생성되거나 삭제될 때도 반응하도록 할 수 있습니다. 
console.log(files); 가 있는 부분에 files를 반복문으로 하나씩 처리해서 리스팅을 하면되는데 이런 형태일 것 입니다.

const testFolder = './data/';
const fs = require('fs');

fs.readdir(testFolder, (err, files) => {
    var list = '<ol>';
    var i = 0;
    while (i < files.length){
    list = list + `<li><a href="/?id=${files[i]}">${files[i]}</a></li>`

    i+=1
    }
    list = list + '</ol>';
});

# Node.js javascript의 function으로 중복된 코드 정리하기 - 만들고 있는 웹 어플리케이션에서 반복되는 코드가 있을 수 있습니다. 
그럴때 function으로 중복되는 코드를 묶어서 관리하면 한 눈에 파악하기 더욱 쉬워질 것 입니다. 그러면 function으로 어떻게 코드들을 묶는가 하면

function '함수이름' (parameter) {
    [값을 리턴 하기 전에 여러 처리할 코드]    
    return//반복되는 코드//
}

이렇게 함수를 만듭니다. parameter는 코드 안에 동적으로 반응 하는 부분이 있다면 필요한 부분입니다. [] 안에 처리할 코드는 
만약 return 값을 내기 전에 어떤 처리가 필요할 경우 추가 할 수 있는 부분입니다.

# nodejs 동기적과 비동기적 그리고 콜백 - 동기적(synchronous)과 비동기적(asynchronous)이라는 개념에 대해 배워보겠습니다. 
동기적이라는 것은 몇가지의 처리를 해야할 때 첫번째 처리를 하고 나서 두번째 처리를 하는 식으로 순차적으로 처리해 나가는 것 이라면 
비동기적이라는 것은 첫번째 처리를 하는 중에 시간이 걸리는 동안 다음 처리도 병렬적으로 처리를 시작하는 방식입니다. 
이렇게 들으면 동기적보다 비동기적이라는 개념이 더욱 효율적으로 느껴집니다. 그리고 거의 맞는 말이죠 하지만 비동기적이 효율적이지만 훨씬 복잡한 방법을 가지고 있다고도 보입니다.
node.js 에서 동기적 비동기적을 보려면 node.js 공식문서에서 기본 모듈목록을 봤더니 예를들어 file system 줄이면 fs 항목에 여러 메소드 이름 중 
fs.readFile 와 fs.readFileSync 이렇게 비슷하지만 뒤에 Sync가 붙어있는게 다른 메소드들이 있었습니다.
실습을 위해 파일을 두개 만들었는데 첫째파일은 단순히 B 라는 문자를 적어놓은 txt 파일이고 두번째 파일은 readFile실습을 할 javascript파일을 만들었습니다.
js 파일의 내용은 
var fs = require('fs');

//readfileSync

console.log('readFileSync test')
console.log('A');
var result = fs.readFileSync('example/syncSample.txt', 'utf-8');
console.log(result);
console.log('C');

//readFile


console.log('readFile test')
console.log('A');
fs.readFile('example/syncSample.txt', 'utf-8', function(err, data){
    console.log(data);
});
console.log('C');

이런 내용입니다. readFileSync test의 출력 내용은 A, B, C 순으로 출력되었습니다.
반면 readFile test의 출력내용은 A, C, B 순으로 출력되었습니다. 동기적인 readFile 메소드는 A를 출력하고 readFile이 진행을 다 끝난 다음 
C를 출력한 것이고, readFileSync는 A출력 후 readFileSync를 실행하는 시간동안 C를 출력하고 그사이 처리가 다된 readFileSync처리에 따라 
마지막으로 B가 출력된것입니다.

그리고 콜백에 대해 지금까지 제가 이해한 내용은 node.js에서 함수는 값으로서 변수에 할당 될 수 있습니다.예를 들어 
var a = function () {   <--  함수에 이름이 없는 익명함수 라고 합니다.
    console.log('A);
};
라는 코드는 A를 콘솔에 출력하는 함수를 변수 a에 할당했습니다. 변수에 함수를 할당 할 수 있으니 
function slowfunc(callback){
    callback();
};
라는 코드에 callback이라는 인자에 위에 a라는 값이 함수인 변수를 넣으면 a변수를 함수로 실행되므로 A라는 값이 콘솔에 출력됩니다.
이렇게 어떤 함수안에 인자로서 또 다른 함수를 사용하는것이 콜백이라고 이해했으나 아직 제대로 콜백의 효용이나 원리같은건 실감하지 못하고 있으므로 
더욱 공부해봐야 겠습니다.

# HTML form 태그 - HTML문법중에 form태그에 대해 공부해보겠습니다. form 태그는 사용자 입력 양식을 위한 태그라고 합니다. form 태그는 텍스트인풋 태그나
체크박스 등 여러 입력을 위한 태그를 담을 수 있습니다. 실습으로 작성한 코드는 이렇습니다.
<form action="http://localhost:3000/process_create" method="post">
<p>
    <input type="text" name="title">
</p>
<p>
    <textarea name="description"></textarea>
</p>
<p>
    <input type="submit">
</p>
</form>

위쪽 두개의 text타입 input 태그와 textarea태그에는 name attribute가 각각 title과 description으로 값을 주었습니다. 
그리고 submit 타입인 input 태그로 위의 title과 description의 데이터를 전송하는데 그때 form태그로 감싸여진 태그들을 묶어서 submit 하는걸로 보입니다.
이제 form태그를 살펴보면 action이라는 속성의 값이 http://localhost:3000/process_create 라고 되어있는데 이 값으로 submit이 되는거 같습니다.
또 이렇게 submit 되면 http://localhost:3000/process_create?title="타이틀"&description="본문" 이런 url로 이동 하게 됩니다.
process_create뒤의 query string의 url 까지 전부 표시되면 이 경로로 여러 보안 문제가 발생할 수 있기 때문에 form태그의 method속성을 post 로 주면 
query string 부분이 감춰진 상태의 url 로 이동됩니다. 만약 method속성을 따로 지정하지 않으면 get 값으로 지정 된다고 합니다.

# APP 글 생성 UI 만들기 - 위의 form태그를 이용하여 글 생성 UI를 만들어 보겠습니다. 본문에 어디서든 글 생성 UI로 갈 수 있게 눈에 잘 띄는 곳에 
<a>create</a>의 링크 태그를 생성합니다. 또 링크에는 href(hypertext reference) 를 적어주어야 하죠
<a href="/create">create</a> 정도로 href 속성을 주면 이제 pathname이 /create가 오는 경우에 글 생성 UI를 표시 하게끔 하면 되겠습니다.
/create pathname은 ?id=HTML 같이 ?로 시작하는 query string이 아니기 때문에 else if 문을 적을 때 위치를 잘 확인 해야겠습니다.

else if (pathname === '/create') {
      fs.readdir('./data', function(error, filelist){
        var title = 'WEB - CREATE';
        var list = templateList(filelist)
        var template = templateHTML(title, list, 
        `
        <form action="http://localhost:3000/create_process" method="post">
          <p>
              <input type="text" name="title" placeholder="title">
          </p>
          <p>
              <textarea name="description" placeholder="description"></textarea>
          </p>
          <p>
              <input type="submit" value="create">
          </p>
        </form>
        `);
    
        response.writeHead(200);
        response.end(template);
      });
    }  
이렇게 적절한 곳에 pathname이 /create인 경우의 조건문을 입력하고 readdir메소드는 글 생성 UI에서도 파일 리스트를 볼 수 있게 하기위해 
가져왔습니다. form태그에 action 속성의 값은 아직 처리하지 않은 부분입니다. title 이나 description에 placeholder라는 속성은 입력칸에 무엇을 
입력하면 되는지 정보를 주기위한 속성입니다.

이제 이렇게 post방식으로 전송되는 데이터를 어떻게 받는지를 공부해보겠습니다. 
var qs = require('querystring');

    else if (pathname === '/create_process') {
      var body = '';
      request.on('data', function(data){
        body += data;
      });
      request.on('end', function(){
        var post = qs.parse(body);
        var title = post.title;
        var description = post.description;
        console.log(post.title)
      });
      response.writeHead(200);
      response.end('success');
    }
이런 코드로 post 데이터를 받아 보았습니다.  첫줄 부터 보면 일단 글 생성 UI에서 action속성의 경로가 create_process였으니 
pathname이 '/create_process'인 경우로 조건문을 걸었습니다. 그다음은 빈문자열 변수인 body를 생성했고 http.createServer의 콜백함수의 인자중 
request를 가져왔습니다. post 데이터는 사용자가 서버측으로 요청한 데이터기 때문입니다. 
request.on의 첫번째 인자로 'data'라는 문자열을 주고 콜백함수의 인자도 data 인데 앞의 data랑 꼭 같을 필요는 없어 보입니다.
request.on의 콜백 함수의 내용으로 빈 문자열 body에 data를 += 해주었습니다.
그리고 다시 request.on에서 첫째 인자로 'end'라는 문자열을 주면 위 data의 처리가 다 끝난 경우를 뜻 하는거 같습니다. 둘째 인자로 콜백함수가 오고
콜백함수 안에서 데이터를 처리를 하는데 post라는 변수를 선언하고 querystring모듈의 parse 메소드에 위에서 처리하던 body를 인자로 주었습니다.
이 post변수를 콘솔로그 해보면 {title: '제목', description: '본문'} 같은 형태로 출력이 됩니다. 각각 title과 description이라는 변수에 각 값을 담았습니다.

현재 VSC에서 querystring을 쓰면 취소선이 그어져 있어서 왜 그런지 찾아 보니까 요즘은 querystring대신 
var title = new URLSearchParams(body).get('title');
var description = new URLSearchParams(body).get('description');
처럼 new URLSearchParams 를 쓰고 있었습니다. 하지만 querystring으로 실습해도 정상작동 하기 떄문에 이번 실습에서는 강의를 따라가기위해서 일단 querystring을 쓰려고 합니다.

그럼 이제 타이틀과 본문 변수를 만들었으니 이걸 가지고 새로운 파일을 쓰는 방법을 배워보겠습니다. 파일을 관리하는 방법이니깐 readfile 이나 readdir 같이 FileSystem의 메소드중 하나 일 것입니다.
공식문서에서 찾아보니 writefile메소드가 있었습니다. 
fs.writefile('파일이름', '파일내용',[옵션,] 콜백)
이런 형태로 사용 하면 된다고 하네요 

        fs.writeFile(`data/${title}`, description, 'utf-8', function(err){
          response.writeHead(200);
          response.end('success');
        });

첫번째 인자는 현재 서버를 돌리는 디렉토리에 있는 data 디렉토리에 파일을 모아 두고 title의 입력 내용에 따라 동적으로 작동하도록 인자를 주었습니다.
두번째 인자는 description변수를 입력대로 동적으로 주었고 세번째 인자는 옵션으로 utf-8 형식으로 인코딩 하기 위한 인자입니다.
네번째 인자로 콜백이 왔습니다. 콜백함수의 err 인자는 파일 작성중 에러가 일어날 때를 위한 인자지만 현재 실습에서는 예외처리는 배우지 않았고 이후에 보충하도록 하겠습니다.
콜백 함수의 내용으로 response.writehead와 response.end를 주었습니다. 실행해보면 data 디렉토리에 파일이름이 title이고 내용이 description인 파일이 생성되었고 웹페이지는 
/create_process 경로이고 body는 success인 페이지로 이동해 있습니다. 

이 상태보다는 파일 생성후 바로 해당 파일을 웹에서 볼 수 있는 상태로 하고 싶을떄 redirection을 하면 되는데 리다이렉션을 하는 방법은 
        fs.writeFile(`data/${title}`, description, 'utf-8', function(err){
          response.writeHead(302, {location : `/?id=${title}`});
          response.end();
        });
이렇게 콜백함수의 내용을 바꾸면 됩니다. 본래의 response.writehead(200)이라는 값은 웹이 성공적으로 작동했다는 코드이고 
위 코드처럼 302 코드는 이번요청에 일시적으로 location의 주소로 리다이렉션 해준다는 코드라고 합니다. 또 location의 주소에 template string으로 ${title}값을 주면 생성한 파일이름과 같은 id값을 
가진 페이지로 바로 갈 수 있게 되었습니다.

# update 기능 구현 - 우리가 생성한 글을 수정할 수 있게 하고 싶습니다. 위에서 처럼 a 태그로 update 링크를 만들고 href로 /update를 주면 될거같습니다.
거기에 update는 우리가 어떤 글을 수정하고 싶은지도 알아야 하니깐 /update?id=${title} 같이 어떤글을 수정 할지 정보도 필요할 것입니다.
이제 pathname이  /update인 페이지를 만들겠습니다. 

else if (pathname === '/update') {
      fs.readdir('./data', function(error, filelist){
        fs.readFile(`./data/${queryData.id}`, 'utf-8', function(err, description){
          var title = queryData.id
          var list = templateList(filelist)
          var template = templateHTML(title, list, 
            `
            <form action="/update_process" method="post">
              <p><input type="hidden" name="id" value="${title}"></p>
              <p>
                  <input type="text" name="title" value="${title}">
              </p>
              <p>
                  <textarea name="description">${description}</textarea>
              </p>
              <p>
                  <input type="submit" value="update">
              </p>
            </form>
            `,
            `<a href="/create">create</a> <a href="/update?id=${title}">update</a>`);
      
          response.writeHead(200);
          response.end(template);
        })
    });
    }

이런 형식입니다. update페이지는 create페이지와 달리 수정하고자 하는 글의 제목과 본문이 있어야 하기 때문에 readfile메소드와 리스트를 표시하기위한
readdir 둘다 필요합니다. create페이지에서 입력칸에 있던 placeholder속성 대신 수정 할 글의 제목과 본문을 넣어주었습니다.
그리고 이후 수정한 내용을 nodejs로 우리 로컬 컴퓨터의 수정한 파일로 전송 할 텐데 우리는 해당 파일의 제목으로 구별해왔습니다. 하지만
수정은 제목도 수정이 가능 할 것이기 때문에 수정된 제목으로 로컬컴퓨터에서 파일을 찾으면 일치하지 않을 것이기 때문에 이를 해결해야합니다.
제목을 수정하고도 수정전 제목을 유지하는 태그를 하나 만들었는데 
              <p><input type="hidden" name="id" value="${title}"></p>
이 태그 입니다. name을 id로 주고 value는 수정전 제목과 같은 값을 줍니다. hidden이라고 하는 type으로 화면에 표시하지 않아서 수정할수 없도록 
숨기지만 수정전 title 값은 간직하고 있도록 했습니다. 수정된 데이터를 보내준 경로도 처리해보겠습니다.

else if (pathname === '/update_process'){
      var body = '';
      request.on('data', function(data){
        body += data;
      });
      request.on('end', function(){
        var post = qs.parse(body);
        var id = post.id;
        var title = post.title;
        var description = post.description;
        fs.rename(`data/${id}`, `data/${title}`, function(err){
          fs.writeFile(`data/${title}`, description, 'utf-8', function(err){
            response.writeHead(302, {location : `/?id=${title}`});
            response.end();
          });
        })
      });

    }
  
  이렇게 처리하였습니다.기본 골격은 create_process와 비슷하지만 데이터중에는 id 값도 있기때문에 post.id 값을 id변수에 담았고 
  파일 이름을 바꾸는 fs.rename으로 파일이름을 바꾼뒤 fs.writefile로 파일 내용도 변경하였습니다. 그리고 나선 302 코드로 리다이렉션까지 해주었습니다.

  # delete 기능 구현 - CRUD중 마지막 delete를 구현해보겠습니다.우선 코드는 
               `<a href="/create">create</a>
               <a href="/update?id=${title}">update</a>
               <form action="delete_process" method="post">
                <input type="hidden" name="id" value="${title}">
                <input type="submit" value="delete">
               </form>`
  삭제 버튼은 form으로 구현 하였는데요 위에서와 같이 생성, 수정과 같이 a태그로 구현했을 때의 문제점 때문인데요 
  a태그로 구현시 쿼리스트링으로 삭제 처리를 하는 url이 노출되고 이 url을 다른 사람에게 공유하면 원하지 않던 데이터 삭제가 
  일어날 수 있기 때문에 그렇다고 합니다. 그래서 수정페이지와 같이 form태그에서 post방식으로 삭제버튼을 만들었습니다.
   else if (pathname === '/delete_process'){
      var body = '';
      request.on('data', function(data){
        body += data;
      });
      request.on('end', function(){
        var post = qs.parse(body);
        var id = post.id;
        /*var title = new URLSearchParams(body).get('title');
        var description = new URLSearchParams(body).get('description');*/
        fs.unlink(`data/${id}`, function(err){
          response.writeHead(302, {location : `/`});
          response.end();
        })
      });
    }
삭제처리는 이렇게 하였습니다. 기본적으로 update_process의 코드를 가져왔습니다. 다른점은 request.on의 end 처리에서 변수는 id값만 필요했고 
rename과 writeFile대신 node.js의 파일 삭제 메소드인 unlink로 지울파일의 경로와 콜백 함수를 인자로 주었고 콜백처리에서는 
홈으로 리다이렉션해주는 걸로 마무리 하였습니다.

# 객체(object) - javascript의 파일 정리방식중 하나인 객체에 대해 공부해보겠습니다.
객체와 비슷한 개념으로는 배열(array)가 있습니다. 두 개념의 차이점은 배열의 경우 데이터가 
순서에 따라 저장되고 각각 0,1,2... 등의 데이터의 위치를 매길 수 있고 
객체는 데이터가 순서대로 정리되는게 아닌 값마다 key값이 할당되어 있어 해당 key를 알고 있으면 
순서에 상관없이 원하는 데이터값을 골라 낼 수 있습니다.
배열의 예시
var members = ['egoing', 'k8805', 'hoya'];
console.log(members[1]); 
출력값은 k8805 입니다. 배열은 대괄호 []로 표현됩니다. 배열은 맨 앞에서부터 0,1,2.. 순으로 인덱스가 부여되고 예시처럼 대괄호[]안에 
원하는 인덱스를 입력하면 그 인덱스 값에 맞는 값을 가져옵니다.

객체 예시
var roles = {
  'programmer':'egoing',
  'designer': 'k8805',
  'manager': 'hoya'
  }
console.log(roles.designer);
출력값은 k8805 입니다. 객체는 중괄호{} 로 표현됩니다. 출력값은 위와 같지만 배열과 달리 객체는 순서대로 인덱스가 부여되는 것이 아닌 
programmer, designer, manager 와 같은 key 값을 객체 이름 뒤 온점(.)뒤에 입력하면 원하는 
값을 가져올 수 있습니다. 위 객체 예시에서 데이터들의 순서가 무작위로 섞여 있어도 key 값만 알면
동일하게 값을 가져올 수 있습니다.

다음은 반복문으로 배열과 객체를 처리하는 방법을 알아 보겠습니다.
var members = ['egoing', 'k8805', 'hoya'];
console.log(members[1]); // k8805
var i = 0;
while(i < members.length){
  console.log('array loop', members[i]);
  i = i + 1;
}
출력값으로 
array loop egoing
array loop k8805
array loop hoya
이렇게 출력됩니다. 객체의 경우에는 while문 대신 for문을 씁니다.
var roles = {
  'programmer':'egoing',
  'designer' : 'k8805',
  'manager' : 'hoya'
}
for (var name in roles){
  console.log('object => ', name, 'value => ', roles[name]);)
}
이때 for문에서 roles의 item의 갯수만큼 item을 name이라는 변수에 하나씩 담으면서 {}안의 처리를 반복하는 javascript의 문법입니다. 
이떄 name 변수에 담기는 것은 객체의 key 값 programmer, designer, manager 위치에 있는 key값을 담습니다.value값을 원하면 roles[name]로 
value를 얻을 수 있었습니다.

javascript 객체 값으로서의 함수 - javascript에서 function구문은 구문이기도 하면서 값이기도 합니다. 다른 구문들(if문, while문 등)
은 값은 될 수 없고 구문으로만 사용할 수 있는데 그 예시로 
var i = if(ture){console.log('if문')};
var w = while(true){console.log('while문')};
이런 코드가 있다고 치고 이 코드를 실행하면 syntax오류가 발생합니다. if문과 while문은 값이 아니기 때문이죠 
하지만 javascript에서 function은 변수에 담을 수 있습니다.
var f = function(){
  console.log(1+1);
  console.log(1+2);
}
var a = [f];
a[0]();
 
var o = {
  func:f
}
o.func();
이런 예제 코드에서 변수 f에 익명함수 1+1, 1+2를 콘솔로그하는 함수를 담았고 f()이렇게 변수뒤 괄호를 붙이면 함수를 실행하게 됩니다.
또 a변수에서는 f를 배열방식으로 담았습니다. 그 뒤에서는 o라는 변수에 객체식으로 f를 처리 했습니다. 이렇게 function이 값으로서 
다룰 수 있어서 프로그래밍하면서 좀 더 코드를 깔끔하게 정리 할 수 있었습니다.
한가지 더 예시를 들자면
var o = {
  v1 : 'v1',
  v2 : 'v2',
  f1 : function(){
    console.log(this.v1);
  },
  f2 : function(){
    console.log(this.v2);
  }
}
이런 예시에서 객체 o 안에 f1,f2 라는 property는 자기 자신 객체안에 있는 property를 호출하는 함수 입니다. 그때 
객체의 이름을 써서 그냥 console.log(o.v1)이런 식으로 처리하면 객체의 이름이 바뀔때마다 함수는 바뀐 객체이름을 알고 있어야 하는데
예시처럼 this라는 어떤 약속된 키워드를 쓰면 객체 자신을 가르키는 키워드로 작동합니다.
이렇게 객체를 이용하여 코드를 유지보수하기 쉽고 보기쉽게 정리하는 것을 객체 지향 프로그래밍이라고 하는 것 같습니다.
아주 기본적이고 기능 중심으로 객체 지향 프로그래밍을 배워보았습니다만 객체 지향 프로그래밍 줄여서 OOP(Object Oriented Programming)
은 현재 아주 많은 서비스에서 다루고 있는 프로그래밍 방법론 이라고 알고 있습니다.

   객체로 코드를 리팩토링을 하면 더욱 효율적으로 코드를 관리할 수 있겠습니다. 예를들면
var template = {
  HTML : function(title, list, body, control){
    return`
    <!doctype html>
    <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8">
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>
      ${list}
      ${control}
      ${body}
    </body>
    </html>`;
  },
  List : function (filelist) {
    var list = '<ul>';
    var i = 0;
    while (i < filelist.length){
      list = list + `<li><a href="/?id=${filelist[i]}">${filelist[i]}</a></li>`
  
      i+=1
    }
    list = list + '</ul>';
    return list;
  }
};
이런 객체로 두가지 함수를 묶어서 관리 할 수 있겠습니다. 비슷한 역할을 하는 HTML함수와 List함수를 template라는 객체로 묶어 이 두 
함수가 대략 어떤 역할을 하는지 알아보기 쉽게 하는것입니다. 처음 코드를 짤 때부터 완벽히 정리되어 있도록 짜기는 매우 어려운 일입니다.
저와 같은 초보자, 입문자들은 투박하게 일단 기능할 수 있도록 부터 코드를 짜고 추후 어떤 공통점이 있는 코드들을 함수, 객체, 모듈로 
정리하는 작업을 몇번이고 다시 거쳐가면서 코들를 다듬어 나갈 수 있도록 노력해야겠습니다. 이것이 refactoring 리펙토링 이라고 합니다.

# 모듈화 - 코드가 길어지면 배열, 객체, 함수, 모듈 등으로 정리를 한다고 했습니다. 이중 가장 큰 개념이 모듈입니다. 모듈은 
코드정리를 메인 어플이되는 파일 안에 정리만 하는 것이 아니라 일정 부분의 코드를 다른 파일로 빼서 정리하는 방법입니다.
모듈화를 하는 방법은 모듈 파일을 만들고 그안에 
module.exprot = (모듈화 할 코드들)
이런 식으로 코드를 짜고 나서 모듈을 사용할 파일에서 
var (모듈을 쓸 이름) = require('모듈파일이 있는 경로');
이렇게 만든 모듈을 require 하고 지정한 모듈이름으로 사용하면 됩니다.

# 보안 - 어플리케이션을 만들면서 신경쓸 곳중 보안도 있습니다. 매우 중요한 부분인데요 보안에 취약점이 있으면 서버의 모든 데이터를 
볼 수 있거나 데이터를 마음대로 변경하거나 삭제하는 일도 가능합니다. 이번 강의에서는 간단한 보안의 예시로 node.js의 기본 모듈중 
path모듈을 사용했습니다.
path.parse('../password.js'); 
라는 코드가 있다고하면 아래와 같은 객체를 반환해주는데요
{
  root: '',
  dir: '..',
  base: 'password.js',
  ext: '.js',
  name: 'password'
}
이 객체의 property중 base라고 하는 property의 값을 이용했습니다. 
이용자가 root뒤에 ?id=../password.js/  이런 식으로 query string을 주었을때 보안을 생각하지 않으면 서버가 실행되는 디렉토리의 상위 디랙토리가 
노출되지만 입력된 쿼리스트링을 

    var queryData = url.parse(_url, true).query;
    에서 queryData.id 로 id값을 path.parse().base 로 필터링을 합니다.
    var FilteredId = path.parse(queryData.id).base; 

라는 코드로 한번 필터링하게되면 ../password.js 로 접근해도 base 값인 password.js 만 걸러서 받게되어서 좀 더 안전해질수 있었습니다.
이 필터링 작업을 파일 읽기로 노출되는것 뿐만 아니랑 수정과 삭제 쪽도 적용할 수 있었습니다.